LearnOpenGL Project : Simulator or Game engine

REF : 
https://learnopengl.com/
https://matt-pinch.medium.com/what-are-glad-glfw-and-opengl-569136024c87

source folder: 
--------------
/LearnOpenGL_building_a_gameEngine

project structure:
------------------
assets/				 -> contains all textures (png, jpeg, etc..), fonts, 3D models, etc...
	mesh/			 -> files containing 3D data such obj or stl files
	images/			 -> files for creating textures such jpg or png files
includes/			 -> contains class headers
	Defaults/		 -> contains 
	ResourceClasses/ -> contains classes that handle assets such as Mesh,Material,Texture, Shader, ResourceManager
	UtilClasses/	 -> contains classes that contain resource classes or more common functionality such as Game, GameObject, Scene, UIManager
shaders/			 -> contains all glsl files for vertex, geometry and fragment shaders 
src/				 -> contains all class source files and 3rd party source files
	Classes/		 -> contains all related classes implementation
	main.cpp		 -> entrypoint of the program
CMakeList.txt		 -> handles global project management


3rd party libraries (imported by CMake):
----------------------------------------
- Assimp 	-> for loading different types of 3D model formats
- ImGui		-> for creating UI interface for the engine
- GLM		-> OpenGL's math library
- GLFW		-> handles window context and process input (GLFW maps OS window and input functions to the application such that OpenGL functions can use it) 
- GLAD		-> OpenGL's function loader for mapping OS graphics functions to OpenGL's rendering functions
- stb_image	-> for loading different types of image formats


classes:
--------
Game:
=====
handles initialization of the window , callbacks , UISetup;
also has a update and render method to encapsulate this in the main render loop

Shader:
=======
compiles and validates vertex + fragment + geometry shaders source code and link them to create a shader program
holds the ID of that shader program and encapsulates the "glUniform" macro's for easy management

Texture2D:
=========
same as the Shader class , it binds a texture based upon a width , height and data. 
The data itself is generated by the "stbi_load" function.
you also have to set the internal format , image format, wrap S, wrap T, filter min, filter max

ResourceManager:
================
a singleton class to load/store Texture2D and Shader objects

headers:
--------
callbacks.h 	-> contains all callback functions declarations used and registered in the Gae::registerCallbacks()
config.h	-> contains very usefull defines directives
globals.h	-> contains all the "extern" variables for the project (should be mostly avoided)


Current workflow:
=================

1) a Game instance gets initialized with WINDOW_STD_WIDTH, WINDOW_STD_HEIGHT, WINDOW_STD_NAME and runs it basic setup:
	1.1) Init creates a window instance and initializes GLAD
	1.2) registerCallbacks adds all configured callback functions
	1.3) UISetup runs the UIManager's Init which in turn creates a context for ImGui
	1.4) loadResources runs the ResourceManager's LoadShader which in turn creates a Shader object 
	(should be dynamic later so that we can load/unload shaders and textures at will during execution)

2) a new Cube instance is created and added to a new Scene instance which in turn is added to the UIManager
3) the Game instance calls the Run method starting the main rendering loop
4) the main loop :
	4.1) gets the deltatime 
	4.2) ProcessInput does some things based upon the current m_keys values
	4.3) Update cleares the frame (might be more advanced in the future)
	4.4) Render calls the UIManger's RenderActiveScenes and then RenderUI
		4.4.1) RenderActiveScenes calls renderScene on only the Scenes which active is set to true
			4.4.1.1) renderScene call draw on every GameObject (such as Cube,Spheres)
		4.4.2) RenderUI calls all ImGui functions to draw and setup the UI 
				(e.g.: ImGui::NewFrame() , ImGui::Begin() , ImGui::End() , ImGui::Render() )

	4.5) glfwPollEvents is called to check for events (callbacks)
	4.6) glfwSwapBuffers is called to swap front and back buffer







